#BlueJ class context
comment0.target=Bank
comment0.text=\r\n\ <h2>Bank\ class</h2>\ \r\n\ This\ is\ like\ a\ middle\ man\ between\ bank\ accounts\ and\ model.\ This\ also\ has\ the\ list\ of\ bank\ and\ the\ accounts\ we\ are\ logged\ in\ to.\r\n\ @author\ Minas\ Fakhori\r\n
comment1.params=
comment1.target=Bank()
comment10.params=amount
comment10.target=boolean\ deposit(int)
comment10.text=\r\n\ This\ deposits\ amount\ into\ acount\ if\ the\ loggedIn\ method\ returns\ true,\ it\ calls\ the\ account\ (from\ BankAccount\ class)\ method\ depsoit.\r\n\ @param\ amount\ (int)\ The\ amount\ you\ want\ to\ deposit\ \r\n\ @return\ true/false\r\n
comment11.params=amount
comment11.target=boolean\ withdraw(int)
comment11.text=\r\n\ This\ withdraws\ amount\ from\ acount\ if\ the\ loggedIn\ method\ returns\ true,\ it\ calls\ the\ account\ (from\ BankAccount\ class)\ method\ withdraw.\r\n\ @param\ amount\ (int)\ The\ amount\ you\ want\ to\ withdraw\ \r\n\ @return\ true/false\r\n
comment12.params=
comment12.target=int\ getBalance()
comment12.text=\r\n\ This\ gets\ the\ balance\ if\ the\ loggedIn\ method\ returns\ true,\ it\ calls\ the\ account\ (from\ BankAccount\ class)\ method\ getBalance.\r\n\ @return\ balance/-1\ balance\ the\ account\ balance.\ -1\ means\ an\ error.\ ?\r\n
comment13.params=
comment13.target=int\ getOverDraft()
comment13.text=\r\n\ This\ gets\ the\ overdraft\ if\ the\ loggedIn\ method\ returns\ true,\ it\ calls\ the\ account(from\ BankAccount\ class)\ method\ getOverDraft.\r\n\ @return\ overdraft/-1\ balance\ the\ account\ overdraft\ limmit.\ -1\ means\ an\ error.\ ?\r\n
comment14.params=
comment14.target=int\ getWdLimmit()
comment14.text=\r\n\ This\ gets\ the\ wdLimmit\ from\ another\ getter\ from\ the\ account\ class\r\n\ @return\ account.getWdLimmit()\r\n
comment15.params=wdLimmit
comment15.target=void\ setWdLimmit(int)
comment15.text=\r\n\ This\ sets\ the\ wdLimmit\ from\ another\ setter\ from\ the\ account\ class\r\n\ @param\ account.setWdLimmit()\r\n
comment2.params=accNumber\ accPasswd\ balance\ overDraft\ dob\ wdLimmit
comment2.target=BankAccount\ makeBankAccount(int,\ int,\ int,\ int,\ int,\ int)
comment2.text=\ \r\n\ This\ is\ a\ method\ to\ create\ new\ BankAccounts,\ using\ the\ factory\ method\ rather\ than\ using\ the\ new\ keyword\ directly\r\n\ @param\ accNumber\ (int)\ BankAccount\ account\ number\r\n\ @param\ pinPsswd\ (int)\ \ BankAccount\ acount\ password\r\n\ @param\ balance\ (int)\ \ BankAccount\ the\ balance\ for\ that\ account\ \r\n\ @param\ overDraft\ (int)\ BankAccount\ the\ overdraft\ limmit\ for\ that\ account\ \r\n\ @param\ dob\ (int)\ BankAccount\ the\ date\ of\ birth\ for\ the\ person\ that\ owns\ that\ bank\ account\ \r\n\ @param\ wdLimmit\ (int)\ How\ many\ withdraws\ can\ a\ user\ make\ per\ day.\r\n\ @return\ accNumber,\ accPasswd,\ balance\ ,\ dob,\ wdLimmit\r\n
comment3.params=a
comment3.target=boolean\ addBankAccount(BankAccount)
comment3.text=\ \r\n\ a\ method\ to\ add\ a\ new\ bank\ account\ to\ the\ bank\ -\ it\ returns\ true\ if\ it\ succeeds\ or\ false\ if\ it\ fails\ (it\ never\ fails,\ in\ this\ implementation)\r\n\ @param\ a\ BankAccount\r\n\ @return\ true\r\n
comment4.params=accNumber\ accPasswd\ balance\ overDraft\ dob\ wdLimmit
comment4.target=boolean\ addBankAccount(int,\ int,\ int,\ int,\ int,\ int)
comment4.text=\r\n\ a\ variant\ of\ addBankAccount\ which\ makes\ the\ account\ and\ adds\ it\ all\ in\ one\ go.\r\n\ Using\ the\ same\ name\ for\ this\ method\ is\ called\ 'method\ overloading'\ -\ two\ methods\r\n\ can\ have\ the\ same\ name\ if\ they\ take\ different\ argument\ combinations\ \r\n
comment5.params=newAccNumber\ newAccPasswd
comment5.target=boolean\ login(int,\ int)
comment5.text=\r\n\ @param\ newAccNumber\ checks\ if\ the\ account\ number\ is\ the\ same\ as\ is\ the\ same\ as\ the\ actual\ account\ \r\n\ @param\ newAccPasswd\ checks\ if\ the\ password\ is\ the\ same\ as\ is\ the\ same\ as\ the\ actual\ password\ for\ that\ account\r\n\ @return\ true/false\r\n
comment6.params=newAccPasswd\ dob
comment6.target=boolean\ changePassAuth(int,\ int)
comment6.text=\r\n\ This\ method\ checks\ if\ the\ user\ input\ is\ the\ same\ as\ the\ actual\ password\ and\ the\ date\ of\ birth\ before\ you\ can\ your\ password.\r\n\ To\ use\ this\ method\ you\ call\ it\ in\ the\ model\ and\ give\ it\ two\ paramiters\ both\ int\ and\ make\ it\ do\ something\ if\ it\ returns\ true\ or\ false\r\n\ It\ loops\ through\ the\ accounts\ that\ are\ available\ \ to\ find\ your\ account,\ this\ could\ be\ a\ bad\ way\ to\ do\ it\ because\ if\ two\ people\ have\ the\ same\ password\ and\ birth\ date\r\n\ But\ that\ chances\ of\ that\ are\ low\ \r\n\ It\ uses\ a\ simple\ if\ statments\ to\ check\ if\ both\ the\ account\ password\ and\ the\ date\ of\ birth\ are\ correct.\r\n\ @param\ newAccPasswd\ (int)\ checks\ if\ the\ password\ for\ that\ account\ is\ the\ same\ as\ the\ number\ the\ user\ gives.\r\n\ @param\ dob\ (int)\ checks\ if\ the\ date\ of\ birth\ is\ the\ same\ as\ what\ the\ user\ has\ entered\ (<\=\ this\ is\ done\ in\ the\ model)\r\n\ @return\ true/false\r\n
comment7.params=newPass
comment7.target=void\ newPass(int)
comment7.text=\r\n\ This\ method\ takes\ the\ current\ password\ and\ changes\ it\ with\ another\ password\ it\ calls\ the\ method\ from\ account\ (from\ BankAccount\ class).\r\n\ You\ use\ this\ in\ the\ model\ and\ call\ the\ method\ and\ pass\ the\ new\ int\ password.\r\n\ @param\ newPass\ (int)\ the\ new\ password\r\n
comment8.params=
comment8.target=void\ logout()
comment8.text=\r\n\ This\ method\ resets\ bank\ to\ be\ null\ -\ logged\ out\ state.\ This\ is\ done\ by\ calling\ the\ account\ (from\ BankAccount\ class)\ method\ logout.\r\n
comment9.params=
comment9.target=boolean\ loggedIn()
comment9.text=\r\n\ This\ method\ simply\ checks\ wether\ your\ logged\ in\ or\ not\ using\ a\ simpel\ if\ statment,\ to\ check\ if\ it\ is\ equals\ to\ null\r\n\ @return\ true/false\r\n
numComments=16
