#BlueJ class context
comment0.target=Model
comment0.text=\ \r\n\ The\ model\ represents\ all\ the\ actual\ content\ and\ functionality\ of\ the\ app\r\n\ For\ the\ ATM,\ it\ keeps\ track\ of\ the\ information\ shown\ in\ the\ display\r\n\ (the\ title\ and\ two\ message\ boxes),\ and\ the\ interaction\ with\ the\ bank,\ executes\r\n\ commands\ provided\ by\ the\ controller\ and\ tells\ the\ view\ to\ update\ when\r\n\ something\ changes.\ <br>\r\n\ To\ use\ this,\ you\ call\ the\ methods\ in\ the\ controller\ \ \r\n
comment1.params=
comment1.target=int\ getNumber()
comment1.text=\r\n\ So\ other\ classes\ can\ view\ number\ if\ the\ method\ is\ called\ but\ not\ change\ it.\ \r\n\ To\ get\ the\ number\ you\ just\ call\ the\ method\ 'model.getNumber()'.\ \r\n\ What\ a\ geter\ does\ is\ access\ the\ private\ variable\ (becuase\ it\ is\ in\ the\ same\ class)\ and\ then\ return\ it\ so\ other\ classes\ can\ just\ call\ that\ method\r\n\ rather\ than\ having\ direct\ access.\r\n\ @return\ number\r\n
comment10.params=b
comment10.target=Model(Bank)
comment11.params=message
comment11.target=void\ initialise(java.lang.String)
comment11.text=\r\n\ This\ is\ to\ start\ up\ the\ ATM\ or\ resetting\ after\ an\ error\ or\ logout\ \r\n\ set\ state\ to\ ACCOUNT_NO,\ number\ to\ zero,\ and\ display\ message\ \r\n\ @param\ message\ standard\ instruction\ message\r\n
comment12.params=newState
comment12.target=void\ setState(java.lang.String)
comment12.text=\ use\ this\ method\ to\ change\ state\ -\ mainly\ so\ we\ print\ a\ debugging\ message\ whenever\ the\ state\ changes\ \r\n\ @param\ newState\ the\ state\ it\ is\ going\ to\ next\r\n
comment13.params=label
comment13.target=void\ processNumber(java.lang.String)
comment13.text=\r\n\ These\ methods\ are\ called\ by\ the\ Controller\ to\ change\ the\ Model\ when\ particular\ buttons\ are\ pressed\ on\ the\ GUI\ \r\n\ process\ a\ number\ key\ (the\ key\ is\ specified\ by\ the\ label\ argument)\r\n
comment14.params=
comment14.target=void\ processClear()
comment14.text=\r\nprocess\ the\ Clear\ button\ -\ reset\ the\ number\ (and\ number\ display\ string)\ and\ gets\ the\ start\ of\ the\ current\ state\r\n
comment15.params=
comment15.target=void\ del()
comment15.text=\r\n\ This\ method\ deletes\ the\ last\ digit\ by\ dividing\ by\ 10\ and\ because\ it\ is\ an\ int\ the\ decimal\ disappears.\r\n\ If\ the\ only\ number\ is\ 0\ I\ dont\ want\ it\ to\ display\ anything,\ I\ did\ this\ because\ after\ you\ all\ the\ number\ 0\ would\ apper\ which\ made\ it\ look\ elegant\ \r\n
comment16.params=
comment16.target=void\ processEnter()
comment16.text=\r\n\ This\ the\ the\ enter\ button.\r\n\ The\ enter\ button\ is\ mainly\ used\ to\ change\ states/\ \r\n
comment17.params=
comment17.target=void\ processWithdraw()
comment17.text=\r\n\ Withdraw\ method\ this\ checks\ if\ we\ are\ logged\ in\ by\ checking\ if\ the\ state\ is\ equals\ to\ account\ number\ or\ password\ I\ did\ this\ because\ there\ are\ other\ states\r\n\ and\ when\ changing\ to\ other\ states\ I\ didnt\ want\ the\ state\ to\ logout.\ Until\ you\ press\ logout.\r\n\ This\ then\ switches\ states\ to\ the\ withdraw\ \r\n
comment18.params=
comment18.target=void\ processDeposit()
comment18.text=\r\n\ Deposit\ button\ -\ check\ we\ are\ logged\ in\ and\ then\ switches\ states\r\n
comment19.params=
comment19.target=void\ processBalance()
comment19.text=\r\n\ Balance\ button\ -\ check\ we\ are\ logged\ in\ and\ if\ so\ access\ the\ current\ balance\ and\ the\ overdraft\ limmit\r\n
comment2.params=
comment2.target=java.lang.String\ getTitle()
comment2.text=\r\n\ This\ gets\ the\ title\ for\ other\ classes\ to\ access\ \r\n\ @return\ get\ the\ title\ \r\n
comment20.params=
comment20.target=void\ processFinish()
comment20.text=\r\n\ Finish\ button\ -\ check\ we\ are\ logged\ in\ and\ if\ so\ log\ out\r\n
comment21.params=action
comment21.target=void\ processUnknownKey(java.lang.String)
comment21.text=\r\n\ Any\ other\ key\ results\ in\ an\ error\ message\ and\ a\ reset\ of\ the\ GUI,\ this\ is\ the\ default\ in\ the\ controller\ \r\n
comment22.params=
comment22.target=void\ display()
comment22.text=\r\n\ This\ is\ where\ the\ Model\ talks\ to\ the\ View,\ by\ calling\ the\ View's\ update\ method\r\n\ The\ view\ will\ call\ back\ to\ the\ model\ to\ get\ new\ information\ to\ display\ on\ the\ screen\r\n\ Everytime\ the\ screen\ updates\ it\ checks\ for\ two\ things\r\n\ 1)\ is\ if\ the\ ccB\ (change\ currency)\ button\ is\ clicked\ and\ if\ it\ is\ update\ the\ cc\ window.\ <br>\r\n\ 2)\ The\ second\ thing\ it\ checks\ for\ is\ if\ intOverflow\ is\ happing\ by\ calling\ a\ method.\r\n
comment23.params=
comment23.target=void\ audio()
comment23.text=\r\n\ This\ is\ a\ way\ to\ play\ audio\ in\ java.\r\n\ AudioClip\ is\ a\ class\ that\ you\ import\ that\ plays\ sound,\ this\ is\ mainly\ used\ for\ sound\ rather\ than\ music\ with\ minimal\ latency,\ if\ I\ was\ going\ to\ play\r\n\ music\ I\ would\ use\ MediaPlayer\ because\ you\ dont\ want\ to\ play\ the\ music\ mulitple\ times\ simultaneously,\ but\ I\ want\ to\ play\ a\ sound\ everytime\ you\ click\ a\r\n\ button\ simulatanusly\ thats\ why\ I\ used\ AudioClip.\r\n
comment24.params=
comment24.target=void\ intOverflow()
comment24.text=\r\n\ This\ stops\ an\ interger\ overflow\ from\ happing\ by\ checking\ if\ the\ number\ is\ bigger\ or\ smaller\ than\ another\ number.\r\n\ Before\ you\ could\ withdraw\ a\ negative\ number\ so\ you\ are\ adding\ money.\ This\ is\ a\ big\ vulnerability\ and\ can\ be\ really\ dangerous\ if\ a\ bad\ actor\ was\ using\ this\ system.\r\n\ It\ clears\ the\ screen\ and\ the\ number\ after\ it\ reaches\ a\ certain\ limmit.\r\n\ An\ int\ can\ hold\ 2,147,483,647\ but\ because\ this\ checks\ it\ everytime\ the\ screen\ is\ update\ rather\ than\ before\ it\ is\ updated\ I\ had\ to\ remove\ a\ digit\ just\r\n\ in\ case,\ but\ to\ still\ make\ use\ of\ an\ int\ I\ used\ the\ maximum\ number\ with\ that\ removed\ digit\r\n\ int\ can\ hold\ 10\ digits\ and\ what\ I\ made\ the\ limmit\ can\ only\ hold\ 9\ digits\r\n
comment25.params=
comment25.target=void\ file()
comment25.text=\r\n\ This\ writes\ the\ withdraw\ history\ to\ a\ file\ the\ location\ is\ historyFile\ which\ is\ each\ accounts\ file\ according\ to\ there\ file\ number\r\n\ @throws\ IOException\ incase\ the\ file\ is\ not\ found\ this\ has\ subclasses\ like\ FileNotFoundException\ which\ is\ what\ catches\ the\ error\ if\ the\ file\ is\ not\ foud\r\n\ An\ exception\ is\ when\ a\ there\ is\ a\ problem\ while\ running\ the\ program\ instead\ of\ the\ program\ stopping\ it\ solves\ the\ problem,\ in\ this\ case,\ if\ the\ file\ \r\n\ can't\ be\ created\ or\ opened\ it\ throws\ an\ exception.\r\n
comment26.params=
comment26.target=void\ showHistory()
comment26.text=\r\n\ This\ gets\ the\ history\ from\ the\ arraylist\ this\ is\ similar\ to\ how\ you\ write\ files,\ and\ add\ the\ total\ spend\ \r\n
comment27.params=
comment27.target=void\ changeMode()
comment27.text=\r\n\ This\ method\ changes\ the\ mode\ of\ the\ display\ (light\ mode/\ dark\ mode),\ if\ clicked\ once\ it\ sets\ the\ boolean\ is\ false\ so\ it\ changes\ to\ light\ mode\ and\ changes\r\n\ boolean\ to\ true,\ which\ changes\ it\ to\ dark\ mode\ and\ changes\ the\ mode.\r\n
comment28.params=
comment28.target=void\ normalMode()
comment29.params=
comment29.target=void\ changePassword()
comment29.text=\r\n\ This\ method\ changes\ state\ to\ allow\ to\ change\ password.\r\n\ It\ checks\ if\ the\ user\ is\ logged\ in\ or\ is\ already\ in\ the\ CHECK_PASS\ state\ and\ then\ sets\ the\ state\ to\ CHECK_PASS.\r\n
comment3.params=title
comment3.target=void\ setTitle(java.lang.String)
comment3.text=\r\n\ This\ sets\ title\ so\ other\ classes\ can\ change\ the\ title\ by\ calling\ the\ method\ and\ giving\ it\ a\ parameter\ (which\ is\ what\ you\ want\ the\ title\ to\ be).\r\n\ eg\ 'setTitle("Hello")'\r\n\ A\ setter\ works\ by\ taking\ in\ a\ parameter,\ that\ update\ the\ value\ to\ what\ the\ parameter\ is.\ \r\n\ I\ had\ to\ do\ this\ because\ the\ variable\ was\ a\ private\ variable.\r\n\ this\ keyword\ means\ the\ class\ variable\ not\ the\ method\ variable,\ so\ java\ knows\ what\ variable\ we\ are\ talking\ about\r\n\ @param\ title\ what\ you\ want\ the\ title\ to\ be.\r\n
comment30.params=
comment30.target=void\ whatButton()
comment30.text=\r\n\ This\ lets\ you\ know\ what\ each\ button\ does.\r\n\ This\ uses\ the\ same\ trick\ as\ the\ mode\ changer\ where\ if\ you\ click\ it\ twice\ it\ goes\ to\ the\ current\ state.\r\n\ This\ also\ uses\ the\ emoji\ that\ I\ made\ in\ the\ view\ \r\n
comment31.params=
comment31.target=void\ resetState()
comment31.text=\r\n\ This\ gets\ you\ back\ to\ the\ previous\ state\ and\ exits\ out\ of\ the\ current\ state.\r\n
comment32.params=
comment32.target=void\ clearWd()
comment32.text=ArrayList\ method\ to\ clear\ all\ the\ arrays\ I\ use\ this\ in\ the\ loggout\ process.
comment33.params=
comment33.target=void\ ext()
comment4.params=
comment4.target=java.lang.String\ getDisplay1()
comment4.text=\r\n\ \ \ \ @return\ display1\ this\ returns\ display1\ \ \ \r\n
comment5.params=
comment5.target=java.lang.String\ getDisplay2()
comment5.text=\r\n\ \ \ \ @return\ display2\ this\ returns\ display2\ \ \ \r\n
comment6.params=display1
comment6.target=void\ setDisplay1(java.lang.String)
comment6.text=\r\n\ @param\ display1\ what\ you\ want\ disply1\ to\ be\r\n
comment7.params=display2
comment7.target=void\ setDisplay2(java.lang.String)
comment7.text=\r\n\ @param\ display1\ what\ you\ want\ disply2\ to\ be\r\n
comment8.params=
comment8.target=java.lang.String\ getCTitle()
comment8.text=\r\n\ @returns\ cTitle\ this\ is\ what\ you\ want\ the\ cTitle\ to\ be\r\n
comment9.params=number
comment9.target=void\ setNumber(int)
comment9.text=\r\n@param\ changes\ what\ number\ is,\ from\ another\ class\r\n
numComments=34
